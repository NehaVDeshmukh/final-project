package gui;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.LayoutManager;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileNotFoundException;
import java.text.DecimalFormat;

import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JSlider;
import javax.swing.JToggleButton;
import javax.swing.Timer;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import student.Interpreter;

public class GUI extends JPanel {
	WorldCanvas c;
	JRadioButton wait, random;
	private ButtonGroup group;
	private JPanel stats, action, window, windowOut, left, right, togglePanel,
			zoomAndStep, importPanel;
	private JLabel statsLbl;
	JLabel size, complexity, offense, defense, thisTag, posture, events,
			actionLbl, windowLbl, rateLbl;
	JButton zIn, zOut, time, newWorld, addCritter, showRule;
	JComboBox chooser;
	private String[] actions = { "Wait", "Move forward", "Move backward",
			"Turn left", "Turn right", "Eat", "Attack", "Tag", "Grow", "Bud",
			"Mate" };
	JLabel zoomedAt;
	JFileChooser file;
	JSlider rate;
	Timer t;

	/**
	 * Creates a new GUI V/C
	 */
	public GUI() {
		file = new JFileChooser();
		this.setLayout(new FlowLayout());
		c = new WorldCanvas();
		GridListener g = new GridListener(c);
		c.addMouseListener(g);
		c.addMouseMotionListener(g);
		left = new JPanel();
		left.add(c);
		right = new JPanel(new GridLayout(4, 1));
		right.setPreferredSize(new Dimension(450, 500));
		makeStats();
		makeAction();
		makeWindow();
		makeImport();
		right.add(stats);
		right.add(action);
		right.add(windowOut);
		right.add(importPanel);
		this.add(left);
		this.add(right);
		t = new Timer(0, new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				c.world.stepTime();
				Critter cr = c.world.selectedInhabitant();
				if (cr != null) {
					size.setText("Size: " + cr.mem[3]);
					complexity = new JLabel("Complexity: " + cr.complexity);
					offense = new JLabel("Offense: " + cr.mem[2]);
					defense = new JLabel("Defense: " + cr.mem[1]);
					thisTag = new JLabel("Tag: " + cr.mem[7]);
					posture = new JLabel("Posture: " + cr.mem[8]);
					events = new JLabel("Events: "
							+ new DecimalFormat().format(cr.mem[6]));
				}
				c.repaint();
			}
		});
	}

	private void makeStats() {
		stats = new JPanel(new GridLayout(4, 2));
		statsLbl = new JLabel("Stats");
		statsLbl.setFont(new Font(statsLbl.getFont().getName(), Font.BOLD,
				statsLbl.getFont().getSize() + 1));
		size = new JLabel("Size: ");
		complexity = new JLabel("Complexity: ");
		offense = new JLabel("Offense: ");
		defense = new JLabel("Defense: ");
		thisTag = new JLabel("Tag: ");
		posture = new JLabel("Posture: ");
		events = new JLabel("Events: ");
		stats.add(statsLbl);
		stats.add(size);
		stats.add(complexity);
		stats.add(offense);
		stats.add(defense);
		stats.add(thisTag);
		stats.add(posture);
		stats.add(events);
		stats.setBorder(BorderFactory.createLineBorder(Color.BLACK, 3));
	}

	private void makeAction() {
		chooser = new JComboBox(actions);
		chooser.addActionListener(new CritterListener(this));

		action = new JPanel(new GridLayout(1, 3));

		actionLbl = new JLabel("Actions");
		actionLbl.setFont(statsLbl.getFont());

		action.add(actionLbl);

		action.add(chooser);

		togglePanel = new JPanel(new GridLayout(3, 1));
		group = new ButtonGroup();
		wait = new JRadioButton("Wait");
		random = new JRadioButton("Random");
		group.add(wait);
		group.add(random);
		wait.setSelected(true);
		togglePanel.add(new JLabel("Default critter action:"));
		togglePanel.add(wait);
		togglePanel.add(random);
		action.add(togglePanel);
		action.setBorder(BorderFactory.createLineBorder(Color.BLACK, 3));
	}

	private void makeWindow() {
		windowOut = new JPanel(new GridLayout(1, 2));
		window = new JPanel(new GridLayout(4, 1));
		windowLbl = new JLabel("Window");
		windowLbl.setFont(statsLbl.getFont());
		zIn = new JButton("Zoom in");
		zOut = new JButton("Zoom out");
		time = new JButton("Step time");
		ButtonListener l = new ButtonListener(this);
		zIn.addActionListener(l);
		zOut.addActionListener(l);
		time.addActionListener(l);
		window.add(windowLbl);
		window.add(zIn);
		window.add(zOut);
		window.add(time);
		windowOut.setBorder(BorderFactory.createLineBorder(Color.BLACK, 3));
		zoomAndStep = new JPanel(new GridLayout(4, 1));
		zoomAndStep.add(new JLabel());
		zoomAndStep.setBorder(BorderFactory.createMatteBorder(0, 3, 0, 0,
				Color.BLACK));
		zoomedAt = new JLabel("Zoomed in at location: ");
		zoomedAt.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 0));
		rateLbl = new JLabel("Rate of simulation:");
		rateLbl.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 0));
		zoomAndStep.add(zoomedAt);
		rate = new JSlider(0, 100);
		rate.setMajorTickSpacing(10);
		rate.setMinorTickSpacing(1);
		rate.setSnapToTicks(true);
		rate.setPaintTicks(true);
		rate.setPaintLabels(true);
		rate.setValue(0);
		rate.addChangeListener(new ChangeListener() {
			@Override
			public void stateChanged(ChangeEvent arg0) {
				if (((JSlider) arg0.getSource()).getValue() == 0)
					t.stop();
				else {
					t.setDelay(10000 / rate.getValue());
					t.start();
				}
			}
		});
		zoomAndStep.add(rateLbl);
		zoomAndStep.add(rate);
		zoomAndStep.setPreferredSize(new Dimension(200, 200));
		windowOut.add(window);
		windowOut.add(zoomAndStep);
	}

	public void makeImport() {
		importPanel = new JPanel(new GridLayout(3, 1));
		newWorld = new JButton("Open world");
		addCritter = new JButton("Add critter");
		showRule = new JButton("Display rule");
		newWorld.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				file.showDialog(null, "select");
				if (!(file.getSelectedFile() == null)) {
					try {
						c.world = Interpreter.importWorld(file
								.getSelectedFile());
						c.world.setRadius(c.radius);
					} catch (FileNotFoundException e1) {
						JOptionPane.showMessageDialog(null, "Invalid file");
					}
					c.repaint();
				}
			}
		});
		addCritter.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				file.showDialog(null, "select");
				if (!(file.getSelectedFile() == null)) {
					try {
						Critter cr = Interpreter.importCritter(file
								.getSelectedFile());
						String s = JOptionPane
								.showInputDialog("Location of new critter: (r,c)");
						if (s.startsWith("(")) {
							s = s.substring(1, s.length() - 1);
							String[] co = s.split(",");
							cr.setLocation(Integer.parseInt(co[0]),
									Integer.parseInt(co[1]));
							cr.getLocation().setRadius(c.radius);
							c.world.addInhabitant(cr);
						}
					} catch (FileNotFoundException e1) {
						JOptionPane.showMessageDialog(null, "Invalid file");
					}
					c.repaint();
				}
			}
		});
		showRule.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				StringBuffer sb = new StringBuffer();
				if (c.world.selectedInhabitant() != null) {
					c.world.selectedInhabitant().getCurrentRule()
							.prettyPrint(sb);
					JOptionPane.showMessageDialog(null, sb);
				}
			}
		});

		importPanel.add(newWorld);
		importPanel.add(addCritter);
		importPanel.add(showRule);

		importPanel.setBorder(BorderFactory.createLineBorder(Color.BLACK, 3));
	}

	/**
	 * adds an inhabitant to the GUI V/C
	 * 
	 * @param i
	 */
	public void addInhabitant(Inhabitant i) {
		c.world.addInhabitant(i);
		c.repaint();
	}
	
	public void updateStats(Critter c) {
		size.setText("Size: " + c.mem[3]);
		complexity.setText("Complexity: " + c.complexity);
		offense.setText("Offense: " + c.mem[2]);
		defense.setText("Defense: " + c.mem[1]);
		thisTag.setText("Tag: " + c.mem[7]);
		posture.setText("Posture: " + c.mem[8]);
		events.setText("Events: " + c.mem[6]);
	}
}
