Metadata
	Parsing and False Injection
	Hyung Won (Scarlet) Yang - hy323
	Laura Herrle - lmh95
	main class : Main.java
		-takes arguments <input_file> or --mutate <n> <input_file>

Summary (50–300 words)
	The input is translated into Tokens using tokenizer.
	The abstract syntax tree is made up of objects of type Node, which are constructed using tokens.

-

Specification (10–500 words)
	pass tokens to each of the constructors	to make each node.
	The AST correctly and thoroughly represents a program constructed from the critter grammar.

	After construction, the AST is immutable except by calls to the mutate() method.

-

Design and Implementation (150–1000 words)

    Programming:
	Scarlet programs top-down starting from JUnitTest and Main, and Laura programs bottom-up
-

Testing (150–1000 words)

multiple updates followed by update-or-action:
3 > 4 --> mem[3] := 4 mem[2] := mem[6] mem[2] := nearby[mem[1]] wait;

complicated expression in expr:
3 > 4 --> mem[mem[3] + (random[2] mod 200)] := nearby[mem[6]];

multiple conditions or :
3 > 4 or 3 > 7 or 5 > 8 --> mem[3] := 0;

multiple conjunctions and : 
3 > 4 and 5 > 6 and 1 > 7 and mem[1] = 0 --> mate;

{ condition } : 
{ahead[1] != 1 and ahead[1] != 2} and ahead[1] != 0-1 --> attack;

multiple addop : 
mem[3] <= 1+2+3+4+5+6-10 --> mem[5] :=4;

multiple mulop 
mem[2] <= 1*3*5*5/2 mod 3 --> mem[5] := 4;

multiple addop and mulop
mem[2] <= 1+4*5+3*3+6*5*5 --> mem[4] := 4;

-

Known problems (1–500 words)
	none yet

-

Comments (1–200 words)

good